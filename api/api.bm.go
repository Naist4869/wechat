// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathDemoPing = "/demo.service.v1.Demo/Ping"
var PathDemoSayHello = "/demo.service.v1.Demo/SayHello"
var PathDemoSayHelloURL = "/kratos-demo/say_hello"

var PathFileSystemPing = "/demo.service.v1.FileSystem/Ping"
var PathFileSystemMediaIDGet = "/demo.service.v1.FileSystem/MediaIDGet"
var PathFileSystemNewsURLGet = "/demo.service.v1.FileSystem/NewsURLGet"

var PathTBKPing = "/demo.service.v1.TBK/Ping"
var PathTBKKeyConvert = "/demo.service.v1.TBK/KeyConvert"
var PathTBKWithDraw = "/demo.service.v1.TBK/WithDraw"

var PathWechatMatchedTemplateMsgSend = "/demo.service.v1.Wechat/MatchedTemplateMsgSend"
var PathWechatBalanceTemplateMsgSend = "/demo.service.v1.Wechat/BalanceTemplateMsgSend"

// DemoBMServer is the server API for Demo service.
type DemoBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)
}

var DemoSvc DemoBMServer

func demoPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.Ping(c, p)
	c.JSON(resp, err)
}

func demoSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func demoSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DemoSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

// RegisterDemoBMServer Register the blademaster route
func RegisterDemoBMServer(e *bm.Engine, server DemoBMServer) {
	DemoSvc = server
	e.GET("/demo.service.v1.Demo/Ping", demoPing)
	e.GET("/demo.service.v1.Demo/SayHello", demoSayHello)
	e.GET("/kratos-demo/say_hello", demoSayHelloURL)
}

// FileSystemBMServer is the server API for FileSystem service.
type FileSystemBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	MediaIDGet(ctx context.Context, req *MediaIDReq) (resp *MediaIDResp, err error)

	NewsURLGet(ctx context.Context, req *NewsURLGetReq) (resp *NewsURLGetResp, err error)
}

var FileSystemSvc FileSystemBMServer

func fileSystemPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.Ping(c, p)
	c.JSON(resp, err)
}

func fileSystemMediaIDGet(c *bm.Context) {
	p := new(MediaIDReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.MediaIDGet(c, p)
	c.JSON(resp, err)
}

func fileSystemNewsURLGet(c *bm.Context) {
	p := new(NewsURLGetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.NewsURLGet(c, p)
	c.JSON(resp, err)
}

// RegisterFileSystemBMServer Register the blademaster route
func RegisterFileSystemBMServer(e *bm.Engine, server FileSystemBMServer) {
	FileSystemSvc = server
	e.GET("/demo.service.v1.FileSystem/Ping", fileSystemPing)
	e.GET("/demo.service.v1.FileSystem/MediaIDGet", fileSystemMediaIDGet)
	e.GET("/demo.service.v1.FileSystem/NewsURLGet", fileSystemNewsURLGet)
}

// TBKBMServer is the server API for TBK service.
type TBKBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	KeyConvert(ctx context.Context, req *KeyConvertReq) (resp *KeyConvertResp, err error)

	WithDraw(ctx context.Context, req *WithDrawReq) (resp *WithDrawResp, err error)
}

var TBKSvc TBKBMServer

func tBKPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.Ping(c, p)
	c.JSON(resp, err)
}

func tBKKeyConvert(c *bm.Context) {
	p := new(KeyConvertReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.KeyConvert(c, p)
	c.JSON(resp, err)
}

func tBKWithDraw(c *bm.Context) {
	p := new(WithDrawReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.WithDraw(c, p)
	c.JSON(resp, err)
}

// RegisterTBKBMServer Register the blademaster route
func RegisterTBKBMServer(e *bm.Engine, server TBKBMServer) {
	TBKSvc = server
	e.GET("/demo.service.v1.TBK/Ping", tBKPing)
	e.GET("/demo.service.v1.TBK/KeyConvert", tBKKeyConvert)
	e.GET("/demo.service.v1.TBK/WithDraw", tBKWithDraw)
}

// WechatBMServer is the server API for Wechat service.
type WechatBMServer interface {
	MatchedTemplateMsgSend(ctx context.Context, req *MatchedTemplateMsgSendReq) (resp *google_protobuf1.Empty, err error)

	BalanceTemplateMsgSend(ctx context.Context, req *BalanceTemplateMsgSendReq) (resp *google_protobuf1.Empty, err error)
}

var WechatSvc WechatBMServer

func wechatMatchedTemplateMsgSend(c *bm.Context) {
	p := new(MatchedTemplateMsgSendReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WechatSvc.MatchedTemplateMsgSend(c, p)
	c.JSON(resp, err)
}

func wechatBalanceTemplateMsgSend(c *bm.Context) {
	p := new(BalanceTemplateMsgSendReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WechatSvc.BalanceTemplateMsgSend(c, p)
	c.JSON(resp, err)
}

// RegisterWechatBMServer Register the blademaster route
func RegisterWechatBMServer(e *bm.Engine, server WechatBMServer) {
	WechatSvc = server
	e.GET("/demo.service.v1.Wechat/MatchedTemplateMsgSend", wechatMatchedTemplateMsgSend)
	e.GET("/demo.service.v1.Wechat/BalanceTemplateMsgSend", wechatBalanceTemplateMsgSend)
}
